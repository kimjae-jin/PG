const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');
const DB_FILE = path.join(__dirname, 'database.db');
if (fs.existsSync(DB_FILE)) { console.log(`[INFO] 기존 데이터베이스 파일(${DB_FILE})을 삭제하고 다시 생성합니다.`); fs.unlinkSync(DB_FILE); }
const db = new sqlite3.Database(DB_FILE, (err) => { if (err) { return console.error('[ERROR] 데이터베이스 연결에 실패했습니다:', err.message); } console.log(`[SUCCESS] SQLite 데이터베이스에 성공적으로 연결되었습니다: ${DB_FILE}`); });
const createTableStatements = [
    `CREATE TABLE Companies ( company_id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL UNIQUE, company_type TEXT NOT NULL CHECK(company_type IN ('CLIENT', 'COMPETITOR', 'PARTNER', 'INTERNAL')), business_registration_number TEXT UNIQUE, ceo_name TEXT, address TEXT, phone_number TEXT, email TEXT, created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')) );`,
    `CREATE TABLE CompanyLicenses ( license_id INTEGER PRIMARY KEY AUTOINCREMENT, company_id INTEGER NOT NULL, license_name TEXT NOT NULL, license_number TEXT UNIQUE, issue_date TEXT, expiry_date TEXT, issuer TEXT, created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')), FOREIGN KEY (company_id) REFERENCES Companies(company_id) ON DELETE CASCADE );`,
    `CREATE TABLE Technicians ( technician_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, resident_registration_number TEXT UNIQUE, phone_number TEXT, email TEXT UNIQUE, address TEXT, hire_date TEXT, employment_status TEXT NOT NULL DEFAULT 'EMPLOYED' CHECK(employment_status IN ('EMPLOYED', 'ON_LEAVE', 'RESIGNED')), created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')) );`,
    `CREATE TABLE Qualifications ( qualification_id INTEGER PRIMARY KEY AUTOINCREMENT, technician_id INTEGER NOT NULL, qualification_name TEXT NOT NULL, qualification_number TEXT, issuer TEXT, issue_date TEXT, expiry_date TEXT, FOREIGN KEY (technician_id) REFERENCES Technicians(technician_id) ON DELETE CASCADE );`,
    `CREATE TABLE Trainings ( training_id INTEGER PRIMARY KEY AUTOINCREMENT, technician_id INTEGER NOT NULL, training_name TEXT NOT NULL, institution TEXT, start_date TEXT, end_date TEXT, completion_status TEXT DEFAULT 'COMPLETED' CHECK(completion_status IN ('PLANNED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED')), FOREIGN KEY (technician_id) REFERENCES Technicians(technician_id) ON DELETE CASCADE );`,
    `CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY AUTOINCREMENT, project_name TEXT NOT NULL, project_code TEXT UNIQUE, client_company_id INTEGER, project_status TEXT NOT NULL CHECK(project_status IN ('PLANNING', 'BIDDING', 'ONGOING', 'COMPLETED', 'DROPPED')), start_date TEXT, end_date TEXT, description TEXT, created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')), FOREIGN KEY (client_company_id) REFERENCES Companies(company_id) ON DELETE SET NULL );`,
    `CREATE TABLE Quotations ( quotation_id INTEGER PRIMARY KEY AUTOINCREMENT, project_id INTEGER, client_company_id INTEGER NOT NULL, quotation_number TEXT NOT NULL UNIQUE, issue_date TEXT NOT NULL, total_amount REAL NOT NULL, expiry_date TEXT, status TEXT NOT NULL DEFAULT 'PENDING' CHECK(status IN ('PENDING', 'ACCEPTED', 'REJECTED')), created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')), FOREIGN KEY (project_id) REFERENCES Projects(project_id) ON DELETE SET NULL, FOREIGN KEY (client_company_id) REFERENCES Companies(company_id) ON DELETE RESTRICT );`,
    `CREATE TABLE Contracts ( contract_id INTEGER PRIMARY KEY AUTOINCREMENT, project_id INTEGER UNIQUE, quotation_id INTEGER UNIQUE, contract_date TEXT NOT NULL, contract_amount REAL NOT NULL, status TEXT NOT NULL DEFAULT 'ACTIVE' CHECK(status IN ('ACTIVE', 'COMPLETED', 'TERMINATED')), FOREIGN KEY (project_id) REFERENCES Projects(project_id) ON DELETE CASCADE, FOREIGN KEY (quotation_id) REFERENCES Quotations(quotation_id) ON DELETE SET NULL );`,
    `CREATE TABLE ContractRevisions ( revision_id INTEGER PRIMARY KEY AUTOINCREMENT, contract_id INTEGER NOT NULL, revision_date TEXT NOT NULL, revised_amount REAL, reason TEXT NOT NULL, description TEXT, FOREIGN KEY (contract_id) REFERENCES Contracts(contract_id) ON DELETE CASCADE );`,
    `CREATE TABLE Financials ( financial_id INTEGER PRIMARY KEY AUTOINCREMENT, contract_id INTEGER NOT NULL, transaction_type TEXT NOT NULL CHECK(transaction_type IN ('INCOME', 'EXPENSE')), transaction_date TEXT NOT NULL, amount REAL NOT NULL, description TEXT, due_date TEXT, FOREIGN KEY (contract_id) REFERENCES Contracts(contract_id) ON DELETE RESTRICT );`,
    `CREATE TABLE CareerRecords ( career_id INTEGER PRIMARY KEY AUTOINCREMENT, technician_id INTEGER NOT NULL, project_id INTEGER NOT NULL, role TEXT, participation_start_date TEXT NOT NULL, participation_end_date TEXT NOT NULL, assigned_task TEXT, FOREIGN KEY (technician_id) REFERENCES Technicians(technician_id) ON DELETE CASCADE, FOREIGN KEY (project_id) REFERENCES Projects(project_id) ON DELETE CASCADE );`,
    `CREATE TABLE Documents ( document_id INTEGER PRIMARY KEY AUTOINCREMENT, document_name TEXT NOT NULL UNIQUE, document_type TEXT, created_at TEXT NOT NULL DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now', 'localtime')) );`
];
db.serialize(() => {
    db.run("BEGIN TRANSACTION;");
    console.log("\n[INFO] 데이터베이스 테이블 생성을 시작합니다...");
    createTableStatements.forEach((statement) => { if (!statement.trim().startsWith('--')) { db.run(statement, (err) => { if (err) { console.error(`[ERROR] 테이블 생성 실패: ${err.message}`); } }); } });
    db.run("COMMIT;", (err) => { if (err) { console.error("\n[ERROR] 트랜잭션 커밋에 실패했습니다:", err.message); } else { console.log("\n[SUCCESS] 모든 데이터베이스 테이블이 성공적으로 생성되었습니다."); } });
    console.log("\n[INFO] 시스템 테스트를 위한 샘플 데이터를 추가합니다...");
    const insert = (sql, params, message) => { const stmt = db.prepare(sql); params.forEach(param => stmt.run(param)); stmt.finalize(err => { if (err) console.error(`[ERROR] ${message} 추가 실패:`, err.message); else console.log(`  - ${message} 추가 완료.`); }); };
    insert("INSERT INTO Companies (company_name, company_type, business_registration_number, ceo_name) VALUES (?, ?, ?, ?)", [['메가테크 주식회사', 'CLIENT', '111-22-33333', '이순신'], ['글로벌 솔루션즈', 'CLIENT', '222-33-44444', '강감찬']], 'Companies 샘플 데이터');
    insert("INSERT INTO Technicians (name, email, hire_date, employment_status) VALUES (?, ?, ?, ?)", [['홍길동', 'gildong.hong@example.com', '2022-05-10', 'EMPLOYED'], ['김철수', 'chulsoo.kim@example.com', '2020-01-15', 'EMPLOYED'], ['이영희', 'younghee.lee@example.com', '2019-08-01', 'RESIGNED'], ['박서준', 'seojun.park@example.com', '2023-11-20', 'EMPLOYED']], 'Technicians 샘플 데이터');
    insert("INSERT INTO Qualifications (technician_id, qualification_name, issuer, issue_date) VALUES (?, ?, ?, ?)", [[1, '정보처리기사', '한국산업인력공단', '2021-03-15'], [1, 'AWS Certified Solutions Architect', 'Amazon Web Services', '2023-08-01'], [2, '전기기사', '한국산업인력공단', '2019-09-20'], [4, 'PMP (Project Management Professional)', 'PMI', '2022-12-10']], 'Qualifications 샘플 데이터');
    insert("INSERT INTO Projects (project_name, project_code, client_company_id, project_status, start_date) VALUES (?, ?, ?, ?, ?)", [['차세대 전력 관리 시스템 구축', 'PJT-2024-001', 1, 'ONGOING', '2024-02-01'], ['스마트 빌딩 자동화 솔루션 도입', 'PJT-2023-005', 2, 'COMPLETED', '2023-03-15']], 'Projects 샘플 데이터');
    insert("INSERT INTO CareerRecords (technician_id, project_id, role, participation_start_date, participation_end_date, assigned_task) VALUES (?, ?, ?, ?, ?, ?)", [[1, 1, '개발자', '2024-02-01', '2024-12-31', '백엔드 API 개발'], [2, 2, '현장소장', '2023-03-15', '2023-11-30', '프로젝트 총괄 관리']], 'CareerRecords 샘플 데이터');
    insert("INSERT INTO Quotations (project_id, client_company_id, quotation_number, issue_date, total_amount, expiry_date, status) VALUES (?, ?, ?, ?, ?, ?, ?)", [[null, 1, 'QT-2025-001', '2025-08-10', 125000000, '2025-09-09', 'ACCEPTED'], [null, 2, 'QT-2025-002', '2025-08-11', 88000000, '2025-09-10', 'PENDING']], 'Quotations 샘플 데이터');
    insert("INSERT INTO Contracts (project_id, quotation_id, contract_date, contract_amount, status) VALUES (?, ?, ?, ?, ?)", [[2, null, '2023-03-10', 250000000, 'COMPLETED']], 'Contracts 샘플 데이터');
});
db.close((err) => { if (err) { return console.error('[ERROR] 데이터베이스 연결 종료에 실패했습니다:', err.message); } console.log('[SUCCESS] 데이터베이스 연결이 성공적으로 종료되었습니다.'); });
